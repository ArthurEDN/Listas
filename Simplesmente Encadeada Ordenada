public class SimplesmenteEncadeada{ //Simplesmente encadeada e ordenada(numeros)

    private No primeiro;
    private No ultimo;
    private int cont;


    public SimplesmenteEncadeada() {
        primeiro = null;
        ultimo = null;
        cont = 0;
    }
   
    public void adicionarSort(int valor) throws Exception { //add
    
            No novo = new No(valor);

            if (primeiro == null) {  //  Lista vazia?
                primeiro = novo;
                ultimo = novo;
            } else if (posicao <= primeiro.dado) {  //  Posição Inicial
                novo.proximo = primeiro;
                primeiro = novo;
            } else if (posicao >= ultimo.dado) {  // Ultima Posição
                ultimo.proximo = novo;
                ultimo = novo;
            } else {  //  Demais posições
                No atual = primeiro
                No anterior = null;

                while(atual != null && novo.dado > atual.dado){
                     anterior = atual;
                     atual = atual.proximo;
                }
                
                anterior.proximo = novo;
                novo.proximo = atual;
            }
            cont++;
    }

    public void remover(int posicao) throws Exception { //  remove
        if (primeiro == null || posicao < 0 || posicao > tamanho()) {
            throw new Exception("Vetor vazio ou posição inválida");
        } else {
            if (posicao == 0) { // Posição inicial
                primeiro = primeiro.proximo; //Referenciando o segundo nó
            } else {
                No aux = primeiro;

                for(int i = 0; i < posicao -1; i++){
                    aux = aux.proximo;
                }
                aux.proximo = aux.proximo.proximo; // Referenciando o valor de próximo do nó à frente

                if(posicao == cont -1){
                    ultimo = aux;
                }
            }
            cont--;
        }
    }

    public boolean pesquisar(int valor){ //  Contains
       No aux = primeiro;

           for(int i = 0;i < tamanho();i++){
               if(valor == aux.dado){
                   return true;
               } else {
                aux = aux.proximo;
               }
           }
        return false;
    }

    public int pesquisarIndice(int valor) { // indexOf
        int i = 0;
        No aux = primeiro;

        while(aux != null){
            if(valor == aux.dado){
                return i;
            }else{
                aux = aux.proximo;
                i++;
            }
        }
        return -1;
    }

    public int pesquisarElemento(int posicao) throws Exception {  // Get
        if(primeiro == null || posicao < 0 || posicao > tamanho()){
            throw new Exception("Vetor vazio ou posição inválida");
        } else {
            No aux = primeiro;

            for (int i = 0; i < posicao; i++) {
                aux = aux.proximo;                        //  Percorrendo os nós e guardando as referencias
            }

            return aux.dado;
        }
    }

    public int tamanho(){   //Size
        return cont;
    }

    public void exibir(){
       No aux = primeiro;

       while(aux != null) {
           System.out.println(aux.dado + " ");
           aux = aux.proximo;                       //  Atualizando referencia para o proximo nó
       }

        System.out.println();
    }
}
